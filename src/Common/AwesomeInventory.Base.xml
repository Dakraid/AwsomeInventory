<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AwesomeInventory.Base</name>
    </assembly>
    <members>
        <member name="T:AwesomeInventory.ArgumentEmtpyException">
            <summary>
            Exception to be thrown if an argument has no item/element in it.
            </summary>
        </member>
        <member name="M:AwesomeInventory.ArgumentEmtpyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AwesomeInventory.ArgumentEmtpyException"/> class.
            </summary>
            <param name="argName"> Name of the empty argument. </param>
        </member>
        <member name="M:AwesomeInventory.ArgumentEmtpyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AwesomeInventory.ArgumentEmtpyException"/> class.
            </summary>
            <param name="serializationInfo"> All the info needed to deserialize the exception. </param>
            <param name="streamingContext"> Describes source and destination of this exception. </param>
        </member>
        <member name="T:AwesomeInventory.IReset">
            <summary>
            Classes that can be reset to initial states.
            </summary>
        </member>
        <member name="M:AwesomeInventory.IReset.Reset">
            <summary>
            Reset to initial states.
            </summary>
        </member>
        <member name="T:AwesomeInventory.ErrorText">
            <summary>
            Provide strings for Error messages.
            </summary>
        </member>
        <member name="T:AwesomeInventory.RangedWeaponStatsString">
            <summary>
            Strings for ranged weapon stats.
            </summary>
        </member>
        <member name="T:AwesomeInventory.AwesomeInventoryServiceProvider">
            <summary>
            Service provider for AwesomeInventory.
            </summary>
        </member>
        <member name="P:AwesomeInventory.AwesomeInventoryServiceProvider.Plugins">
            <summary>
            Gets available plugins.
            </summary>
        </member>
        <member name="M:AwesomeInventory.AwesomeInventoryServiceProvider.GetService``1">
            <summary>
            Get service of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"> type of service. </typeparam>
            <returns> Instance of <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:AwesomeInventory.AwesomeInventoryServiceProvider.TryGetService(System.Type,System.Object@)">
            <summary>
            Try get service of <paramref name="type"/>.
            </summary>
            <param name="type"> Service type. </param>
            <param name="service"> Instance of <paramref name="type"/>, default value if not found. </param>
            <returns> Returns true if <paramref name="service"/> is found. </returns>
        </member>
        <member name="M:AwesomeInventory.AwesomeInventoryServiceProvider.TryGetImplementation``1(``0@)">
            <summary>
            Try get service that implements <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"> Type to implement. </typeparam>
            <param name="service"> Instance of implementation. </param>
            <returns> Returns true if service is found. </returns>
        </member>
        <member name="M:AwesomeInventory.AwesomeInventoryServiceProvider.AddService(System.Type,System.Object)">
            <summary>
            Add service to service provider.
            </summary>
            <param name="type"> Service type. </param>
            <param name="servie"> Service to add. </param>
        </member>
        <member name="M:AwesomeInventory.AwesomeInventoryServiceProvider.AddType(System.Type,System.Type)">
            <summary>
            Add <paramref name="baseType"/> and <paramref name="derivedType"/> as a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to a type dictionary.
            </summary>
            <param name="baseType"> Typs as a key. </param>
            <param name="derivedType"> Type as a value. </param>
        </member>
        <member name="M:AwesomeInventory.AwesomeInventoryServiceProvider.MakeInstanceOf``1(System.Object[])">
            <summary>
            Create instance of a certain type, which is a result after querying a type dictionary with <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"> A <see cref="T:System.Type"/> used for querying a type dictionary. </typeparam>
            <param name="ctorArgs"> Arguments passed to constructor.</param>
            <returns> Instance created after querying a type dictionary. </returns>
        </member>
        <member name="T:AwesomeInventory.UI.UIText">
            <summary>
            Text displayed on UI. Call Translate() on members whenever they are referenced, e.g., UIText.Equip.Translate(); .
            </summary>
        </member>
        <member name="T:AwesomeInventory.ILogger">
            <summary>
            A utility class for logging.
            </summary>
        </member>
        <member name="M:AwesomeInventory.ILogger.Message(System.String)">
            <summary>
            Write message to the logger.
            </summary>
            <param name="message"> Message to write. </param>
        </member>
        <member name="T:AwesomeInventory.Plugin">
            <summary>
            Define metadata for plugins.
            </summary>
        </member>
        <member name="P:AwesomeInventory.Plugin.ID">
            <summary>
            Gets ID for plugin.
            </summary>
        </member>
        <member name="P:AwesomeInventory.Plugin.DisplayName">
            <summary>
            Gets name for the plugin to display on screen.
            </summary>
        </member>
        <member name="T:AwesomeInventory.ValidateArg">
            <summary>
            A helper for validating arguments.
            </summary>
        </member>
        <member name="M:AwesomeInventory.ValidateArg.NotNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if argument is null.
            </summary>
            <param name="arg"> Argument to check. </param>
            <param name="argName"> Name of <paramref name="arg"/>. </param>
            <exception cref="T:System.ArgumentNullException"> Throws if arg is null. </exception>
        </member>
        <member name="M:AwesomeInventory.ValidateArg.NotNullOrEmpty(System.Object,System.String)">
            <summary>
            Check if argument is null or empty.
            </summary>
            <param name="arg"> Argument to check. </param>
            <param name="argName"> Name of <paramref name="arg"/>. </param>
        </member>
    </members>
</doc>
